About
-----
TEMPORAL-JDBC-PROXY allows to keep transactional time and history of data 
with a two-timestamps solutions.

The proxy accepts SQL queries with temporal extensions and rewrites them 
into standards SQL seemingly for the supported DBMSs.

This implementation is based on the Log4JDBC (copyright 2007-2010 Arthur Blake).

The software assumes a schema which has been temporalized. Temporalizing a schema 
basically means adding the needed information to keep history of data, namely 
the timestamps, also appends tend column to all primary keys.

Dependencies
------------
The TEMPORAL-JDBC-PROXY uses the TSQLParser, a separate project for parsing TSQL
queries.

Usage
-----
The difference with a standard JDBC is the connection which is obtaining by:

   Connection conn= TemporalDriverManager.getConnection(driver, username, password, schema);

Where schema is a `temporalized` schema (see Temporalize Utility)

Note: For MySQL, you need to compile and install the now_usec() UDF (see Add-on)
	  1) gcc -fPIC -Wall -I/usr/include/mysql -shared -o now_usec.so now_usec.cc
	  2) move the now_usec.so to mysql plugin directory
	  3) In mysql: 
	  		mysql> create function now_usec returns string soname 'now_usec.so';
	  4) Test the the function:
	  		mysql> select now_usec();

Temporalize Utility
-------------------
This version includes a utility to "temporized" a schema, which consists of:
- Add two columns (tstart, tend) to each table.
- tend column is appended to all primary keys.

Limitations
-----------
- The current version support MySQL and PostgreSQL.
- For practicality reasons the level of granularity is the microseconds, ie: for two txns 
  on the same row and withing the same microsec, only the first is kept.
- Timestamps in MySQL are in a decimal format.
- A now_usec() UDF needs to be added to MySQL.
- batch statements are not supported.

Version
-------
TEMPORAL JDBC PROXY 0.1 (Alpha)

Contact
-------
Carl Curino